{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"M\u1ed9t note nh\u1ecf c\u1ee7a IT Kh\u00f4ng bi\u1ebft code","text":""},{"location":"#vi-khong-biet-code-nen-toi-phai-tu-hoc-code","title":"V\u00ec kh\u00f4ng bi\u1ebft code n\u00ean t\u00f4i ph\u1ea3i t\u1ef1 h\u1ecdc code","text":"<ul> <li>Note c\u1ee7a m\u00ecnh s\u1ebd c\u00f3 2 phi\u00ean b\u1ea3n</li> <li> <ul> <li>Ti\u1ebfng Vi\u1ec7t: m\u00ecnh s\u1ebd note m\u1ecdi th\u1ee9 tr\u01b0\u1edbc ti\u00ean b\u1eb1ng ti\u1ebfng vi\u1ec7t v\u00e0 sau \u0111\u00f3 d\u1ecbch m\u1ecdi th\u1ee9 sang ti\u1ebfng Anh (khi n\u00e0o r\u1ea3nh th\u00ec d\u1ecbch)</li> </ul> </li> <li> <ul> <li>English: I'm not good at this, so I will learn and write as <code>En go lit su</code> at the same time</li> </ul> </li> <li>And, nothing more</li> </ul>"},{"location":"#inh-huong-nam-2025","title":"\u0110\u1ecbnh h\u01b0\u1edbng n\u0103m 2025","text":"<pre><code>AZ-700\nAWS - Certificates\nAdmin Microsoft 365\nDevOps\nK8s \n- v\u00e0 t\u1ea5t nhi\u00ean l\u00e0 c\u00f3 th\u1eadt nhi\u1ec1u ti\u1ec1n hehe\n</code></pre>"},{"location":"docker/","title":"Install","text":""},{"location":"docker/#install-docker-engine-for-ubuntu","title":"Install Docker Engine for Ubuntu","text":"<ol> <li>Make bash file to run with content inside:</li> </ol> <pre><code># \n\n# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n\n</code></pre> <ol> <li>Change mode with execute permission</li> </ol> <pre><code>chmod +x file_name.sh\n</code></pre> <ol> <li>Run bash file</li> </ol> <pre><code>sudo ./file_name.sh\n</code></pre> <ol> <li>Install docker component from apt</li> </ol> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <ol> <li>Test</li> </ol> <pre><code>docker run -d -p 8080:80 docker/welcome-to-docker\n\n##open brower and navigate to ip_address:8080 and successful!\n</code></pre>"},{"location":"swarm/","title":"Docker Swarm","text":"<p>Introduction:</p> <p>Docker Swarm is a powerful clustering and orchestration tool that allows you to manage and scale Docker containers across multiple nodes. In this guide, we will cover the basics of Docker Swarm, including setting up a Swarm, joining nodes, deploying services, scaling, updating, and more. Whether you\u2019re new to Docker or looking to expand your container orchestration skills, this article will provide you with a solid foundation to get started with Docker Swarm.</p> <p>Prerequisites:</p> <p>Before we dive into Docker Swarm, ensure you have the following:</p> <ul> <li>A basic understanding of Docker concepts and commands.</li> <li>Three machines (virtual or physical): one as the manager node and two as worker nodes. These machines should have Docker installed.</li> </ul> <p>Setting Up Docker Swarm:</p> <ol> <li>Initialize the Swarm on the manager node:</li> </ol> <pre><code>docker swarm init --advertise-addr &lt;MANAGER_NODE_IP&gt;\n</code></pre>  \ud83d\udca1  To check token docker swarm join-token manager   <ol> <li>Join the worker nodes to the Swarm:</li> </ol> <p>On each worker node, run the following command (replace\u00a0<code>&lt;MANAGER_NODE_IP&gt;</code>\u00a0with the IP address of the manager node):</p> <pre><code>docker swarm join - token &lt;TOKEN&gt; &lt;MANAGER_NODE_IP&gt;:2377\n</code></pre> <ol> <li>Verify the Swarm status:</li> </ol> <p>On the manager node, run:</p> <pre><code>docker node ls\n</code></pre> <p>Deploying and Managing Services in Docker Swarm:</p> <p>Deploying a service:</p> <pre><code>docker service create - name my-nginx - replicas 3 -p 80:80 nginx\n</code></pre> <p>Listing services:</p> <pre><code>docker service ls\n</code></pre> <p>Scaling a service:</p> <pre><code>docker service scale my-nginx=5\n</code></pre> <p>Updating a service:</p> <pre><code>docker service update - image nginx:latest my-nginx\n</code></pre> <p>Inspecting a service:</p> <pre><code>docker service inspect my-nginx\n</code></pre> <p>Removing a service:</p> <pre><code>docker service rm my-nginx\n</code></pre> <p>Conclusion:</p> <p>Docker Swarm provides a simple yet powerful solution for orchestrating containers in a distributed environment. With the ability to deploy, scale, update, and manage services across multiple nodes, Docker Swarm empowers developers and system administrators to build resilient and scalable applications.</p> <p>Remember to experiment and explore additional features such as service rolling updates, service rollback, service constraints, and more. Happy container orchestration with Docker Swarm!</p>"},{"location":"test/","title":"test page","text":""},{"location":"test/#hihi","title":"hihi","text":""},{"location":"blog/","title":"Blog","text":""}]}